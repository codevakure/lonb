{
    // Python Configuration - Team Standard Settings
    "python.defaultInterpreterPath": "./.venv/bin/python",
    "python.terminal.activateEnvironment": true,
    "python.analysis.typeCheckingMode": "basic",
    "python.analysis.autoImportCompletions": true,
    
    // Linting Configuration
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": false,
    "python.linting.flake8Enabled": true,
    "python.linting.mypyEnabled": true,
    "python.linting.banditEnabled": true,
    
    // Formatting Configuration - Black Standard
    "python.formatting.provider": "black",
    "python.formatting.blackArgs": [
        "--line-length=88"
    ],
    
    // isort Configuration for Import Sorting
    "python.sortImports.args": [
        "--profile=black",
        "--line-length=88",
        "--multi-line=3",
        "--trailing-comma"
    ],
    
    // Testing Configuration - pytest with coverage
    "python.testing.pytestEnabled": true,
    "python.testing.unittestEnabled": false,
    "python.testing.pytestArgs": [
        "tests/",
        "-v",
        "--cov=.",
        "--cov-report=term-missing",
        "--cov-report=html"
    ],
    
    // Editor Configuration - Format on Save
    "editor.formatOnSave": true,
    "editor.formatOnType": false,
    "editor.formatOnPaste": false,
    "editor.codeActionsOnSave": {
        "source.organizeImports": "explicit",
        "source.fixAll": "explicit"
    },
    
    // Language-specific Formatting
    "[python]": {
        "editor.formatOnSave": true,
        "editor.insertSpaces": true,
        "editor.tabSize": 4,
        "editor.rulers": [88]
    },
    "[json]": {
        "editor.defaultFormatter": "vscode.json-language-features",
        "editor.formatOnSave": true,
        "editor.tabSize": 2
    },
    "[jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features",
        "editor.formatOnSave": true,
        "editor.tabSize": 2
    },
    "[yaml]": {
        "editor.formatOnSave": true,
        "editor.insertSpaces": true,
        "editor.tabSize": 2
    },
    "[markdown]": {
        "editor.defaultFormatter": "vscode.markdown-language-features",
        "editor.formatOnSave": true,
        "editor.wordWrap": "on",
        "editor.tabSize": 2
    },
    "[dockerfile]": {
        "editor.formatOnSave": true,
        "editor.tabSize": 2
    },
    
    // File Management Configuration
    "files.autoSave": "onFocusChange",
    "files.trimTrailingWhitespace": true,
    "files.insertFinalNewline": true,
    "files.trimFinalNewlines": true,
    "files.exclude": {
        "**/__pycache__": true,
        "**/*.pyc": true,
        "**/venv": true,
        "**/.venv": true,
        "**/.pytest_cache": true,
        "**/.coverage": true,
        "**/htmlcov": true,
        "**/.mypy_cache": true,
        "**/node_modules": true,
        "**/.DS_Store": true
    },
    "files.watcherExclude": {
        "**/__pycache__/**": true,
        "**/venv/**": true,
        "**/.venv/**": true,
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/**": true,
        "**/.pytest_cache/**": true,
        "**/htmlcov/**": true
    },
    
    // Search Configuration
    "search.exclude": {
        "**/__pycache__": true,
        "**/venv": true,
        "**/.venv": true,
        "**/.pytest_cache": true,
        "**/.mypy_cache": true,
        "**/htmlcov": true,
        "**/.coverage": true,
        "**/node_modules": true
    },
    
    // Explorer Configuration
    "explorer.confirmDelete": false,
    "explorer.confirmDragAndDrop": false,
    "explorer.sortOrder": "type",
    "explorer.fileNesting.enabled": true,
    "explorer.fileNesting.patterns": {
        "*.py": "${capture}.pyc",
        "requirements.txt": "requirements-*.txt",
        "docker-compose.yml": "docker-compose.*.yml, Dockerfile*",
        ".env": ".env.*",
        "pyproject.toml": "setup.py, setup.cfg, MANIFEST.in"
    },
    
    // Editor Appearance
    "editor.rulers": [88],
    "editor.wordWrap": "on",
    "editor.wordWrapColumn": 88,
    "editor.minimap.enabled": false,
    "editor.bracketPairColorization.enabled": true,
    "editor.guides.bracketPairs": true,
    "editor.renderWhitespace": "boundary",
    "editor.detectIndentation": false,
    "editor.tabSize": 4,
    "editor.insertSpaces": true,
    "workbench.colorCustomizations": {
        "editorRuler.foreground": "#5a5a5a"
    },
    
    // Terminal Configuration
    "terminal.integrated.defaultProfile.linux": "bash",
    "terminal.integrated.defaultProfile.windows": "PowerShell",
    "terminal.integrated.defaultProfile.osx": "zsh",
    "terminal.integrated.env.windows": {
        "PYTHONPATH": "${workspaceFolder}"
    },
    "terminal.integrated.env.linux": {
        "PYTHONPATH": "${workspaceFolder}"
    },
    "terminal.integrated.env.osx": {
        "PYTHONPATH": "${workspaceFolder}"
    },
    
    // Workbench Configuration
    "workbench.editor.untitled.hint": "hidden",
    "workbench.startupEditor": "readme",
    "workbench.editor.enablePreview": false,
    
    // Git Configuration
    "git.enableSmartCommit": true,
    "git.confirmSync": false,
    "git.autofetch": true,
    "git.ignoreLimitWarning": true,
    "githubPullRequests.pullBranch": "never",
    "githubPullRequests.createOnPublishBranch": "never",
    
    // Docker Configuration
    "docker.showStartPage": false,
    
    // YAML Configuration
    "redhat.telemetry.enabled": false,
    
    // Testing Tools
    "pytest.enabled": true,
    "pytest.args": [
        "tests/",
        "-v"
    ],
    
    // Coverage Configuration
    "coverage-gutters.showGutterCoverage": true,
    "coverage-gutters.showLineCoverage": true,
    "coverage-gutters.showRulerCoverage": true,
    "coverage-gutters.coverageFileNames": [
        "coverage.xml",
        "htmlcov/index.html"
    ],
    
    // Emmet Configuration
    "emmet.includeLanguages": {
        "jinja-html": "html",
        "jinja2": "html"
    },
    
    // Problem Matcher
    "problems.decorations.enabled": true,
    
    // GitHub Copilot Configuration
    "github.copilot.chat.codeGeneration.useInstructionFiles": true,
    "github.copilot.chat.welcomeMessage": "never",
    "github.copilot.chat.localeOverride": "en",
    "github.copilot.chat.followUps": "always",
    "github.copilot.enable": {
        "*": true,
        "markdown": true,
        "yaml": true,
        "json": true,
        "jsonc": true,
        "python": true,
        "plaintext": false
    },
    "github.copilot.advanced": {
        "length": "medium",
        "temperature": "0.1"
    },
    
    // Custom Copilot Instructions for the Project
    "github.copilot.chat.reviewSelection.instructions": [
        {
            "text": "Follow Texas Capital OpenAPI standards and commercial loan service patterns. Focus on security, type safety, and enterprise-grade error handling. Reference standard-swagger-fragments.yaml for response models."
        },
        {
            "file": ".github/copilot-instructions.md"
        }
    ],
    "github.copilot.chat.commitMessageGeneration.instructions": [
        {
            "text": "Use conventional commit format with scope (api/services/utils/tests/config/docker). Include issue numbers when applicable. Examples: 'feat(api): add document upload endpoint', 'fix(tests): mock AWS S3 service properly', 'docs(api): update OpenAPI schema'"
        }
    ],
    "github.copilot.chat.pullRequestDescriptionGeneration.instructions": [
        {
            "text": "Include: ## Summary (what changed), ## Testing (how it was tested), ## Breaking Changes (if any), ## Security Considerations, ## Reviewer Checklist. Reference Texas Capital standards and include API documentation links."
        }
    ],
    
    // Chat Instructions and Prompt Files
    "chat.promptFiles": true
}